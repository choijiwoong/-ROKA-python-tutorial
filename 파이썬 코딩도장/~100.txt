	[p.0 ~ p.100]
1. divmod를 사용하여 몫과 나머지를 tuple형태로 받을 수 있음.
2. 진수별 표현은 0b110, 0o10, 0xF와 같이 표현한다.
3. float('3.4')꼴의 문자열->숫자의 변환역시 자유롭다.
4. 복수수표현 시 공학에서는 j를 사용하며, complex생성자를 이용하여 complex(1.2, 1.3)로 1.2+1.3j의 복소수를 만들 수 있다.
5. type(3.4)!=type(3) == True와 같이 type별 bool연산이 가능하며, 객체에 대해 None할당이 가능하다. 삭제는 del을 이용하며 주로 리스트원소 삭제에 이용한다.
6. input()을 통한 입력 시 split을 사용하여 바로 각 변수별로 저장이 가능하다. 이때 각 변수의 원활한 casting을 위하여 map을 아래와 같이 사용할 수 있다.
   var1, var2=map(int, input("두 정수를 입력해주세요").split())
7. sum(30, 40, 50, 560)에서 2개의 인자를 받는경우를 제외하고 sum은 iterable한 객체만 입력으로 받기때문에 map한 결과를 tuple과 같은 형태로 한번 더 감싸줘야한다. 잘못된 예: sum(30, 40, 30) 옳은 예: sum((30, 40, 30))
8. map()함수는 map type객체를 반환하기에 list나 tuple같은 형태로 casting해줘야한다. map object자체는 iterable객체이기에 next()로 다음 원소의 접근이 가능하며 object자체를 출력 시 주소가 출력된다.
   map object의 내용을 unpacking을 통해 저장할 수도 있다. ex: a, b, c=map(int, input("3개의 숫자를 입력"))
9. print인자 sep을 통해 출력할 값 사이에 출력할 문자를 지정할 수 있다.  ex: print(1,2,3, sep='\n')
10.JAVA처럼 숫자 사이에 _를 넣어 사용해도 무방하다
11.파이썬은 변수에 값을 저장하는 것이 아닌 값객체를 가리키는 방식을 사용하기에 객체가 같은지를 판단하는 is/is not연산자(주소를 나타내는 id도 가능) 또는 sys.getrefcount()를 이용하여 이를 확인할 수 있다.
12.파이썬 셸에서 일차원적인 연산을 통한 결과 확인시, 그 값은 임시로 _라는 변수에 저장되기에 해당 결과를 다시 가져올 수 있다.
   >>1+1
   2
   >>print(_)
   2